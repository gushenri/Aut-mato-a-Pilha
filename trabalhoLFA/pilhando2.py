from pilhando import decodificar_expressao, mostrar_estrutura, avaliar_sequencia, gerar_diagrama, Padrao

def exibir_ajuda():
    print("""
==== Guia: Utiliza√ß√£o do Analisador Sequencial ====

S√≠mbolos suportados:
- ^n : repeti√ß√£o com mem√≥ria (empilha e desempilha), ex.: a^n b^n
- *  : zero ou mais ocorr√™ncias, ex.: a*
- +  : uma ou mais ocorr√™ncias, ex.: a+

Exemplo de modelo: a^n b+ c^n
Exemplo de sequ√™ncia: aaabbbccc

==============================================
""")

def exibir_estrutura_explicativa(estrutura):
    print("\nüìã Estrutura processada (explicada):")
    for idx, bloco in enumerate(estrutura):
        tipo = bloco.categoria
        if tipo == Padrao.SIMPLES:
            descricao = "ocorr√™ncia √∫nica"
        elif tipo == Padrao.REPETIDO:
            descricao = "repeti√ß√£o com empilhamento (^n)"
        elif tipo == Padrao.INVERSO:
            descricao = "desempilhamento espelhado (^n)"
        elif tipo == Padrao.OPCIONAL:
            descricao = "zero ou mais vezes (*)"
        elif tipo == Padrao.MULTIPLO:
            descricao = "uma ou mais vezes (+)"
        else:
            descricao = "desconhecido"
        print(f" {idx + 1}. S√≠mbolo: '{bloco.simbolo}' ‚Üí {descricao}")

exibir_ajuda()

while True:
    modelo = input("Especifique o modelo (ou '?' para ajuda): ").strip()
    if modelo == '?':
        exibir_ajuda()
        continue
    if modelo:
        break
    print("‚ö†Ô∏è O modelo n√£o pode ser vazio. Por favor, informe um valor.")

while True:
    sequencia = input("Especifique a sequ√™ncia a ser verificada: ").strip()
    if sequencia:
        break
    print("‚ö†Ô∏è A sequ√™ncia n√£o pode ser vazia. Por favor, informe um valor.")

print(f"\n‚úÖ Modelo recebido: {modelo}")
print(f"‚úÖ Sequ√™ncia recebida: {sequencia}")
confirmar = input("Deseja prosseguir? (s/n): ").strip().lower()
if confirmar not in ('s', 'sim'):
    print("‚ùå Processo cancelado pelo usu√°rio.")
    exit()

elementos = decodificar_expressao(modelo)

exibir_estrutura_explicativa(elementos)

gerar_diagrama(elementos)

detalhado = input("Ativar modo detalhado de an√°lise? (s/n): ").strip().lower() in ('s', 'sim')

valido = avaliar_sequencia(sequencia, elementos, detalhado=detalhado)

print("\nüéØ Resultado:", "‚úÖ SEQU√äNCIA ACEITA!" if valido else "‚ùå SEQU√äNCIA REJEITADA!")
